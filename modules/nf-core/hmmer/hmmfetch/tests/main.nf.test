nextflow_process {

    name "Test Process HMMER_HMMFETCH"
    script "../main.nf"
    process "HMMER_HMMFETCH"

    tag "modules"
    tag "modules_nfcore"
    tag "hmmer"
    tag "hmmer/hmmfetch"

    test("hmmfetch - key") {

        when {
            process {
                """
                
                input[0] = [
                    [ id:'test', single_end:false ],
                    file('https://raw.githubusercontent.com/tseemann/barrnap/master/db/arc.hmm')
                ]
                input[1] = Channel.of('16S_rRNA').first()
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match('key_out') },
                { assert snapshot(process.out.hmm).match('key_hmm') },
                { assert snapshot(process.out.versions).match('key_versions') }
            )
        }

    }

    test("hmmfetch - no overwrite") {

        when {
            process {
                """
                
                input[0] = [
                    [ id:'arc', single_end:false ],
                    file('https://raw.githubusercontent.com/tseemann/barrnap/master/db/arc.hmm')
                ]
                input[1] = Channel.of('16S_rRNA').first()
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match('nooverwrite_out') },
                { assert snapshot(process.out.hmm).match('nooverwrite_hmm') },
                { assert snapshot(process.out.versions).match('nooverwrite_versions') }
            )
        }

    }

    test("hmmfetch - keyfile") {

        when {
            process {
                """
                
                input[0] = [
                    [ id:'test', single_end:false ],
                    file('https://raw.githubusercontent.com/tseemann/barrnap/master/db/arc.hmm')
                ]
                input[1] = []
                input[2] = Channel
                    .of('16S_rRNA', '23S_rRNA')
                    .collectFile(name: 'keys.txt', newLine: true)
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match('keyfile_out') },
                { assert snapshot(process.out.hmm).match('keyfile_hmm') },
                { assert snapshot(process.out.versions).match('keyfile_versions') }
            )
        }

    }

    test("hmmfetch - index") {

        when {
            process {
                """
                
                input[0] = [
                    [ id:'test', single_end:false ],
                    file('https://raw.githubusercontent.com/tseemann/barrnap/master/db/arc.hmm')
                ]
                input[1] = []
                input[2] = []
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match('index_out') },
                { assert snapshot(process.out.index).match('index_index') },
                { assert snapshot(process.out.versions).match('index_versions') }
            )
        }

    }

}
